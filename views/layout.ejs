<!DOCTYPE html>
<html>
  <head>
    <title><%= __('Title') %></title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <link href='http://fonts.googleapis.com/css?family=Yanone+Kaffeesatz' rel='stylesheet' type='text/css'>
    <script>
    function getMensaje(){
      var aFrases=new Array();
        aFrases[0]="Somos una empresa 100% Mexicana comprometida con la calidad de sus obras y con el medio ambiente.";
        aFrases[1]="Nos preocupamos por mantener una Excelente Calidad, así satisfacemos las necesidades de nuestros clientes.";
        aFrases[2]="Nuestro personal es altamente calificado para la elaboración y supervisión de obra.";
        aFrases[3]="Satisfacemos las necesidades de nuestros clientes, innovando en la infraestructura civil y urbana.";
      return(aFrases[Math.floor(Math.random() * aFrases.length)]);
    }
    </script>
    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/foundation.css">
    <link rel="stylesheet" href="/styles/importer.css">
    <link rel="stylesheet" href="/styles/normalize.css">
    <link rel="stylesheet" href="/styles/splikux.css">
    <link rel="stylesheet" href="/styles/style.css">
    <!--STYLES END-->
  </head>

  <body>

    <nav class="navbar" role="navigation">
      <%- partial ('partials/_nav.ejs') %>
    </nav>

    <div id="firstModal" class="reveal-modal" data-reveal aria-labelledby="firstModalTitle" aria-hidden="true" role="dialog">
      <h1 id="firstModalTitle"></h1>
      <%- partial ('sections/contact.ejs') %>
      <a class="close-reveal-modal" aria-label="Close">&#215;</a>
    </div>
    <div id="secondModal" class="reveal-modal" data-reveal aria-labelledby="firstModalTitle" aria-hidden="true" role="dialog">
      <h1 id="firstModalTitle"></h1>
      <%- partial ('sections/cv.ejs') %>
      <a class="close-reveal-modal" aria-label="Close">&#215;</a>
    </div>
    <div id="thirdModal" class="reveal-modal" data-reveal aria-labelledby="firstModalTitle" aria-hidden="true" role="dialog">
      <h1 id="firstModalTitle">Términos y condiciones.</h1>
      <%- partial ('sections/terms.ejs') %>
      <a class="close-reveal-modal" aria-label="Close">&#215;</a>
    </div>
    <div id="fourthModal" class="reveal-modal" data-reveal aria-labelledby="firstModalTitle" aria-hidden="true" role="dialog">
      <h1 id="firstModalTitle">Aviso legal.</h1>
      <%- partial ('sections/legals.ejs') %>
      <a class="close-reveal-modal" aria-label="Close">&#215;</a>
    </div>

    <%- body %>



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <footer>
      <%- partial ('partials/_footer.ejs') %>
    </footer>

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/dependencies/jquery.js"></script>
    <script src="/js/foundation.min.js"></script>
    <script src="/js/vendor/jquery.js"></script>
    <!--SCRIPTS END-->
    <script src="http://cdnjs.cloudflare.com/ajax/libs/gsap/1.16.1/TweenMax.min.js"></script>
    <script src="//code.jquery.com/jquery-1.11.2.min.js"></script>
    <script src="//code.jquery.com/jquery-migrate-1.2.1.min.js"></script>
    <script src="/js/foundation.min.js"></script>
    <script>
      $(document).foundation();
    </script>
  </body>
</html>
